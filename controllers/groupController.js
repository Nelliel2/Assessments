const token = localStorage.getItem('token');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
async function fetchGroups() {
    try {
        const response = await fetch('http://localhost:3000/groups');
        if (!response.ok) {
            throw new Error('Failed to fetch groups');
        }
        const groups = await response.json();
        const select = document.getElementById('group-name-choice');
        if (select) {
            select.innerHTML = '';  // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
            groups.forEach(group => {
                const option = document.createElement('option');
                option.innerHTML = group.Name;
                option.value = group.id;
                select.appendChild(option);
            });
        }
    } catch (err) {
        console.error(err);
        alert('Error fetching groups');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
async function addGroup() {
    const Name = document.getElementById('Name').value;
    if (!Name) {
        alert('Please provide a Name for the group');
        return;
    }

    try {
        const response = await fetch('http://localhost:3000/groups', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ Name })
        });

        if (!response.ok) {
            throw new Error('Failed to add group');
        }

        fetchGroups();  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    } catch (err) {
        console.error(err);
        alert('Error adding group');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
async function deleteGroup(id) {
    try {
        const response = await fetch(`http://localhost:3000/groups/${id}`, {
            method: 'DELETE',
        });

        if (!response.ok) {
            throw new Error('Failed to delete group');
        }

        fetchGroups();  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    } catch (err) {
        console.error(err);
        alert('Error deleting group');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–∞
async function updateGroup(id) {
    const Name = prompt("Enter new Name for the group:");
    if (!Name) {
        alert('Please provide a valid Name');
        return;
    }

    try {
        const response = await fetch(`http://localhost:3000/groups/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ Name })
        });

        if (!response.ok) {
            throw new Error('Failed to update group');
        }

        fetchGroups();  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    } catch (err) {
        console.error(err);
        alert('Error updating group');
    }
}


async function fetchGroupById(groupId) {
    try {
        const response = await fetch(`http://localhost:3000/groups/${groupId}`, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}` // üü¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            }
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–µ');
        }

        const group = await response.json();
        return group.Name;

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥—Ä—É–ø–ø—ã:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã');
    }
}

async function getSubjectsByGroupId(groupId) {
    try {
        const response = await fetch(`http://localhost:3000/group/${groupId}/subjects`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–µ');
        }

        const subjects = await response.json();

        const select = document.getElementById('subject-name-choice');
        if (select) {
            select.innerHTML = '';
            subjects.forEach(subject => {
                const option = document.createElement('option');
                option.innerHTML = subject.Name;
                option.value = subject.id;
                select.appendChild(option);
            });
        }

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –≥—Ä—É–ø–ø–µ:', err);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

export default {
    updateGroup,
    deleteGroup,
    addGroup,
    fetchGroups,
    fetchGroupById,
    getSubjectsByGroupId
};